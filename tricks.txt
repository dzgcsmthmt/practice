    // Opera 8.0+
var isOpera = (!!window.opr && !!opr.addons) || !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0;
    // Firefox 1.0+
var isFirefox = typeof InstallTrigger !== 'undefined';
    // Safari <= 9 "[object HTMLElementConstructor]" 
var isSafari = Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor') > 0;
    // Internet Explorer 6-11
var isIE = /*@cc_on!@*/false || !!document.documentMode;
    // Edge 20+
var isEdge = !isIE && !!window.StyleMedia;
    // Chrome 1+
var isChrome = !!window.chrome && !!window.chrome.webstore;
    // Blink engine detection
var isBlink = (isChrome || isOpera) && !!window.CSS;
-------------------------------------------------------------------------------------------------
If Chrome remembers some login/password it changes a background color to a yellow one.
Change "white" to any color you want.

input:-webkit-autofill {
    -webkit-box-shadow: 0 0 0 1000px white inset !important;
}
--------------------------------------------------------------------------------------------------
calculate the scrollbar's width
function getScrollWidth() {
    var noScroll, scroll, oDiv = document.createElement("DIV");
    oDiv.style.cssText = "position:absolute; top:-1000px; width:100px; height:100px; overflow:hidden;";
    noScroll = document.body.appendChild(oDiv).clientWidth;
    oDiv.style.overflowY = "scroll";
    scroll = oDiv.clientWidth;
    document.body.removeChild(oDiv);
    return noScroll-scroll;
}
--------------------------------------------------------------------------------------------------
how to accurately test for -0
----x == 0 && 1 / x === -Infinity
----Object.is(x,-0)
--------------------------------------------------------------------------------------------------
Js 构造函数返回值是个对象会改变this的指向，基本类型不会影响this指向
function A(a){
    this.a = a;
    return false;
}
var a = new A(1);
console.log(a);  --->  {a: 1}
function A(a){
    this.a = a;
    return {b:2};
}
var a = new A(1);
console.log(a);  --->  {b: 2}
--------------------------------------------------------------------------------------------------
可以满足a == 2 && a == 3
var a = {
    i: 2,
    valueOf:function(){
        return this.i++;
    }
}

if(a == 2 && a == 3){
    console.log('yes');
}
--------------------------------------------------------------------------------------------------
var a = {a: 1};
var b = {a: 1};
console.log(a > b);      false
console.log(a == b);     false
console.log(a >= b);     true
--------------------------------------------------------------------------------------------------
功能检测，如果支持直接引入支持功能的代码，不支持的引入编译的文件
try {
    a = () => {};
    ARROW_FUNCS_ENABLED = true;
}
catch (err) {
    ARROW_FUNCS_ENABLED = false;
}
编译报错，阻塞加载
try {
    new Function( "( () => {} )" );
    ARROW_FUNCS_ENABLED = true;
}
catch (err) {
    ARROW_FUNCS_ENABLED = false;
}
--------------------------------------------------------------------------------------------------
多维数组转化为一维数组，使用object的key值转为为字符串
ar arr = [[1],[2,[3,4]]];var a = {};a[arr] = 1;
for(var key in a){
    if(a hasOwnProperty(key)){
        return key.split(',');
    }
}
有bug只能是基本数据类型,引用会调用toString()方法
--------------------------------------------------------------------------------------------------
对于处理大量的dom操作，可以使用setTimeout里拆成若干小块，每个小块执行后浏览器线程可以执行一些别的操作，防止长时间的卡顿
setTimeout的延时时间设为0，以尽快重新开始dom操作
--------------------------------------------------------------------------------------------------
动态加载js文件 
加载完成事件 
!IE:  onload
IE: onreadystatechange ==>  readyState loaded || complete maybe either one,maybe both;so unbind event
function loadScript(url, callback){
    var script = document.createElement ("script")
    script.type = "text/javascript";
    if (script.readyState){ //IE
        script.onreadystatechange = function(){
            if (script.readyState == "loaded" || script.readyState == "complete"){
                script.onreadystatechange = null;
                callback();
            }
        };
    } else { //Others
        script.onload = function(){
            callback();
        };
    }
    script.src = url;
    document.getElementsByTagName_r("head")[0].appendChild(script);
}
--------------------------------------------------------------------------------------------------
“innerHTML += …” vs “appendChild(txtNode)”  can also use insertAdjacentHTML()
The former causes the browser to drop all of the old nodes in the target, re-parse all of that HTML, and build new nodes.
to handle Dom with lots of descendants use a clone node
var original = document.getElementById('container');
var cloned = original.cloneNode(true);
cloned.setAttribute('width', '50%');
var elem, contents;
for(var i = 0; i < textlist.length; i++) {
	elem = document.createElement('p');
	contents = document.createTextNode(textlist[i]);
	elem.appendChild(contents);
	cloned.appendChild(elem);
}
original.parentNode.replaceChild(cloned, original);
--------------------------------------------------------------------------------------------------
avoid repaint for background color change
orange: #d18316;
$yellow: #ffe42b;
.btn {
  background-color: $orange;
  color: #000;
  padding: 30px 50px;
  display: inline-block;
  text-decoration: none;
  font-family: Helvetica, Arial, sans-serif;
  position: relative;
  span {
    z-index: 2;
    position: relative;
    }
}

.btn::before {
  content: "";position: absolute;top: 0;left: 0;bottom: 0;right: 0;z-index: 1;background-color: $yellow;
  opacity: 1;transition: opacity 3s;
}

.btn:hover::before {
  opacity: 0;
}
--------------------------------------------------------------------------------------------------
