how to debug a eventhandler bind by jQuery
var clickEvents = $._data($('#foo')[0], "events").click;
$.each(clickEvents, function(key, handlerObj) {
    console.log(handlerObj.handler);
})
-------------------------------------------------------------------------------------------------
// Opera 8.0+
var isOpera = (!!window.opr && !!opr.addons) || !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0;
    // Firefox 1.0+
var isFirefox = typeof InstallTrigger !== 'undefined';
    // Safari <= 9 "[object HTMLElementConstructor]"
var isSafari = Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor') > 0;
    // Internet Explorer 6-11
var isIE = /*@cc_on!@*/false || !!document.documentMode;
    // Edge 20+
var isEdge = !isIE && !!window.StyleMedia;
    // Chrome 1+
var isChrome = !!window.chrome && !!window.chrome.webstore;
    // Blink engine detection
var isBlink = (isChrome || isOpera) && !!window.CSS;
-------------------------------------------------------------------------------------------------
If Chrome remembers some login/password it changes a background color to a yellow one.
Change "white" to any color you want.

input:-webkit-autofill {
    -webkit-box-shadow: 0 0 0 1000px white inset !important;
}
--------------------------------------------------------------------------------------------------
calculate the scrollbar's width
function getScrollWidth() {
    var noScroll, scroll, oDiv = document.createElement("DIV");
    oDiv.style.cssText = "position:absolute; top:-1000px; width:100px; height:100px; overflow:hidden;";
    noScroll = document.body.appendChild(oDiv).clientWidth;
    oDiv.style.overflowY = "scroll";
    scroll = oDiv.clientWidth;
    document.body.removeChild(oDiv);
    return noScroll-scroll;
}
--------------------------------------------------------------------------------------------------
how to accurately test for -0
----x == 0 && 1 / x === -Infinity
----Object.is(x,-0)
--------------------------------------------------------------------------------------------------
Js 构造函数返回值是个对象会改变this的指向，基本类型不会影响this指向
function A(a){
    this.a = a;
    return false;
}
var a = new A(1);
console.log(a);  --->  {a: 1}
function A(a){
    this.a = a;
    return {b:2};
}
var a = new A(1);
console.log(a);  --->  {b: 2}
--------------------------------------------------------------------------------------------------
可以满足a == 2 && a == 3
var a = {
    i: 2,
    valueOf:function(){
        return this.i++;
    }
}

if(a == 2 && a == 3){
    console.log('yes');
}
--------------------------------------------------------------------------------------------------
var a = {a: 1};
var b = {a: 1};
console.log(a > b);      false
console.log(a == b);     false
console.log(a >= b);     true
--------------------------------------------------------------------------------------------------
功能检测，如果支持直接引入支持功能的代码，不支持的引入编译的文件
try {
    a = () => {};
    ARROW_FUNCS_ENABLED = true;
}
catch (err) {
    ARROW_FUNCS_ENABLED = false;
}
编译报错，阻塞加载
try {
    new Function( "( () => {} )" );
    ARROW_FUNCS_ENABLED = true;
}
catch (err) {
    ARROW_FUNCS_ENABLED = false;
}
--------------------------------------------------------------------------------------------------
多维数组转化为一维数组，使用object的key值转为为字符串
ar arr = [[1],[2,[3,4]]];var a = {};a[arr] = 1;
for(var key in a){
    if(a hasOwnProperty(key)){
        return key.split(',');
    }
}
有bug只能是基本数据类型,引用会调用toString()方法
--------------------------------------------------------------------------------------------------
对于处理大量的dom操作，可以使用setTimeout里拆成若干小块，每个小块执行后浏览器线程可以执行一些别的操作，防止长时间的卡顿
setTimeout的延时时间设为0，以尽快重新开始dom操作
--------------------------------------------------------------------------------------------------
动态加载js文件
加载完成事件
!IE:  onload
IE: onreadystatechange ==>  readyState loaded || complete maybe either one,maybe both;so unbind event
function loadScript(url, callback){
    var script = document.createElement ("script")
    script.type = "text/javascript";
    if (script.readyState){ //IE
        script.onreadystatechange = function(){
            if (script.readyState == "loaded" || script.readyState == "complete"){
                script.onreadystatechange = null;
                callback();
            }
        };
    } else { //Others
        script.onload = function(){
            callback();
        };
    }
    script.src = url;
    document.getElementsByTagName_r("head")[0].appendChild(script);
}
--------------------------------------------------------------------------------------------------
“innerHTML += …” vs “appendChild(txtNode)”  can also use insertAdjacentHTML()
The former causes the browser to drop all of the old nodes in the target, re-parse all of that HTML, and build new nodes.
to handle Dom with lots of descendants use a clone node
var original = document.getElementById('container');
var cloned = original.cloneNode(true);
cloned.setAttribute('width', '50%');
var elem, contents;
for(var i = 0; i < textlist.length; i++) {
	elem = document.createElement('p');
	contents = document.createTextNode(textlist[i]);
	elem.appendChild(contents);
	cloned.appendChild(elem);
}
original.parentNode.replaceChild(cloned, original);
--------------------------------------------------------------------------------------------------
avoid repaint for background color change
orange: #d18316;
$yellow: #ffe42b;
.btn {
  background-color: $orange;
  color: #000;
  padding: 30px 50px;
  display: inline-block;
  text-decoration: none;
  font-family: Helvetica, Arial, sans-serif;
  position: relative;
  span {
    z-index: 2;
    position: relative;
    }
}

.btn::before {
  content: "";position: absolute;top: 0;left: 0;bottom: 0;right: 0;z-index: 1;background-color: $yellow;
  opacity: 1;transition: opacity 3s;
}

.btn:hover::before {
  opacity: 0;
}
--------------------------------------------------------------------------------------------------
isInteger polyfill
function isInteger(x) { return (x^0) === x; }
function isInteger(x) { return Math.round(x) === x; }

One fairly common incorrect solution is the following:
function isInteger(x) { return parseInt(x, 10) === x; }
> String(1000000000000000000000)
'1e+21'
> parseInt(1000000000000000000000, 10)
1
--------------------------------------------------------------------------------------------------
函数节流（throttle）与函数去抖（debounce）
throttle：电梯每多少秒启动一次
var throttle = function(delay, action){
  var last = 0
  return function(){
    var curr = +new Date()
    if (curr - last > delay){
      action.apply(this, arguments)
      last = curr
    }
  }
}
debounce：每隔多少秒启动一次，有人进入，重新计时
var debounce = function(idle, action){
  var last
  return function(){
    var ctx = this, args = arguments
    clearTimeout(last)
    last = setTimeout(function(){
        action.apply(ctx, args)
    }, idle)
  }
}
--------------------------------------------------------------------------------------------------
GUID
function S4() {
   return (((1+Math.random())*0x10000)|0).toString(16).substring(1);
}
function guid() {
   return (S4()+S4()+"-"+S4()+"-"+S4()+"-"+S4()+"-"+S4()+S4()+S4());
}
--------------------------------------------------------------------------------------------------
js 判断window对象
在ie6-8下使用Object.prototype.toString(call) 返回 '[Object Object]';
可以使用一个技巧 window == document --> true / document == window --> false
return obj == document && document != obj;
--------------------------------------------------------------------------------------------------
fixed的卡顿问题
fixed的类里添加属性  will-change:transform
--------------------------------------------------------------------------------------------------
$(document).on("input", "#comment", function() {
    if (!m) {
        var t = i(this).val()
          , e = i.string.lenb(t)
          , n = i(this).data("max");
        e > n && (t = i.string.subByte(t, n),
        i(this).val(t)),
        i("#count_hint").html(i.string.lenb(t))
    }
}),
i(document).on("compositionstart", "#comment", function() {
    m = !0
}),
i(document).on("compositionend", "#comment", function() {
    m = !1,
    i("#comment").trigger("input")
})
针对中文输入法使用compositionstart方法
-----------------------------------------------------------------------------------------------------------------------            
HTML提供了5种空格实体（space entity），它们拥有不同的宽度，非断行空格（&nbsp;）是常规空格的宽度，可运行于所有主流浏览器。其他几种空格（ &ensp; &emsp; &thinsp; &zwnj;&zwj;）在不同浏览器中宽度各异。
 
&nbsp;        
 
它叫不换行空格，全称No-Break Space，它是最常见和我们使用最多的空格，大多数的人可能只接触了&nbsp;，它是按下space键产生的空格。在HTML中，如果你用空格键产生此空格，空格是不会累加的（只算1个）。要使用html实体表示才可累加，该空格占据宽度受字体影响明显而强烈。
 
&ensp;        
 
它叫“半角空格”，全称是En Space，en是字体排印学的计量单位，为em宽度的一半。根据定义，它等同于字体度的一半（如16px字体中就是8px）。名义上是小写字母n的宽度。此空格传承空格家族一贯的特性：透明的，此空格有个相当稳健的特性，就是其占据的宽度正好是1/2个中文宽度，而且基本上不受字体影响。
 
&emsp;        
 
它叫“全角空格”，全称是Em Space，em是字体排印学的计量单位，相当于当前指定的点数。例如，1 em在16px的字体中就是16px。此空格也传承空格家族一贯的特性：透明的，此空格也有个相当稳健的特性，就是其占据的宽度正好是1个中文宽度，而且基本上不受字体影响。
 
&thinsp;        
 
它叫窄空格，全称是Thin Space。我们不妨称之为“瘦弱空格”，就是该空格长得比较瘦弱，身体单薄，占据的宽度比较小。它是em之六分之一宽。
 
&zwnj; 
 
它叫零宽不连字，全称是Zero Width Non Joiner，简称“ZWNJ”，是一个不打印字符，放在电子文本的两个字符之间，抑制本来会发生的连字，而是以这两个字符原本的字形来绘制。Unicode中的零宽不连字字符映射为“”（zero width non-joiner，U+200C），HTML字符值引用为： &#8204;
 
&zwj;
 
它叫零宽连字，全称是Zero Width Joiner，简称“ZWJ”，是一个不打印字符，放在某些需要复杂排版语言（如阿拉伯语、印地语）的两个字符之间，使得这两个本不会发生连字的字符产生了连字效果。零宽连字符的Unicode码位是U+200D (HTML: &#8205; &zwj;）。
 
此外，浏览器还会把以下字符当作空白进行解析：空格（&#x0020;）、制表位（&#x0009;）、换行（&#x000A;）和回车（&#x000D;）还有（&#12288;）等等
-----------------------------------------------------------------------------------------------------------------------
随机产生颜色值
(((1 << 24) * Math.random()) >> 0).toString(16).padStart(6,0)
-----------------------------------------------------------------------------------------------------------------------
为target="_blank"的a标签添加属性 rel="noopener"
1、共用一个线程，新页面js运算肯定卡顿
2、window.opener.location = newURL把页面重定向
-----------------------------------------------------------------------------------------------------------------------
